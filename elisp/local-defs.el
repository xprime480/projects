(defun exec-region (command from to replace) 
  "Execute COMMAND on the region FROM through TO.

If REPLACE is non nil, replace the region."
  (shell-command-on-region from to command nil replace nil))

(defvar mail-user 
  "mi.davis@sap.com"
  "*email address to which to send mail generated by mail-command")

(defun mail-command (from to)
  "Mail region FROM through TO to default user.

The default user is specified by the variable mail-user."
  (exec-region
   (format "mail -s \"%s\" %s" (buffer-name) mail-user)
   from to nil))

(defun mail-region ()
  "Mail the current region to default user.

The default user is specified by the variable mail-user."
  (interactive)
  (mail-command (region-beginning) (region-end)))

(defun mail-buffer ()
  "Mail the current buffer to default user.

The default user is specified by the variable mail-user."
  (interactive)
  (mail-command (point-min) (point-max)))

(defvar shell-command "/bin/bash")

(defun bash-region (replace)
  "Execute the region in a subshell."
  (interactive "P")
  (exec-region shell-command (region-beginning) (region-end) replace))

(defun bash-buffer (replace)
  "Execute the current buffer in a subshell."
  (interactive "P")
  (exec-region shell-command (point-min) (point-max) replace))

(defun bash-line ()
  "Execute the current line in a subshell and replace line with output."
  (interactive)
  (let ((from (progn (beginning-of-line) (point)))
	(to (progn (end-of-line) (point))))
    (exec-region shell-command from to t)))

(defun remove-ansi-escapes-from-buffer ()
  "remove ansi escape sequences from the current buffer"
  (interactive)
  (toggle-read-only)
  (let ((pt (point)))
    (goto-char (point-min))
    (replace-regexp "\[[[:digit:]]+m" "" nil nil nil)
    (font-lock-fontify-buffer)
    (goto-char pt)))
  
(add-hook 'Man-mode-hook 'remove-ansi-escapes-from-buffer)

(defun mad-gdb (program)
  "Run a PROGRAM in gdb"
  (interactive "fprogram to debug: ")
  (gdb program))

(defun delete-following-whitespace ()
  (interactive)
  (while (looking-at "[ 	]")
    (delete-char 1)))


(defun set-frame-color (color)
  "Change the default frame color to COLOR"
  (interactive "sColor: ")
  (let ((cell (assoc 'background-color default-frame-alist)))
    (if cell
	(setcdr cell color)
      (setq default-frame-alist
	    (append (list (cons 'background-color color))
		    default-frame-alist))))
  (set-background-color color))

(defun run-guile ()
  (interactive)
  (run-scheme "guile"))

(defun kill-buffer-safe (name)
  (let ((b (get-buffer name)))
    (and (bufferp b) (kill-buffer b))))

;;(defvar mad-gdb-directory "~/pio/review/pio/pio/dev/src/retail/mdo/scheduler/")
(defvar mad-gdb-directory nil)
;;(defvar mad-gdb-program "ExecutionScheduler_full")
(defvar mad-gdb-program nil)

(defun include-guard ()
  "Add include guards to a C/C++ file"
  (interactive)
  (let ((tag (concat (file-name-sans-extension 
		      (file-name-nondirectory (buffer-file-name)))
		     "_h")))
    (save-excursion
      (goto-char (point-min))
      (insert (concat "#if ! defined(" tag ")\n"))
      (insert (concat "#define " tag " 1\n"))
      (goto-char (point-max))
      (insert (concat "\n#endif // not defined " tag "\n")))))

(defun p4-info-insert ()
  "Add p4 tags into the file"
  (interactive)
  (save-excursion
      (goto-char (point-min))
      (insert "// $Id: " (buffer-file-name) "#1 $\n")
      (insert "// $DateTime: " (current-time-string) " $\n")
      (insert "\n")))

(defun insert-time-string ()
  (interactive)
  (insert (format "%s.%03d"
		  (format-time-string "%Y-%m-%d %T" (current-time))
		  (mod (random) 1000))))

(defun random-line-from-buffer ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (forward-line (mod (random) (count-lines (point-min) (point-max))))
    (message (format "%s" (buffer-substring-no-properties
			   (line-beginning-position)
			   (line-end-position))))))

(progn 
  (global-set-key "a" 'remove-ansi-escapes-from-buffer)
  (global-set-key "c" 'compile)
  (global-set-key "g" 'grep)
  (global-set-key "b" 'bury-buffer)
  (global-set-key "l" 'goto-line)
  (global-set-key " " 'just-one-space)
  (global-set-key "" 'manual-entry)
  (global-set-key "m" 'mail-region)
  (global-set-key "M" 'mail-buffer)
  (global-set-key "e" 'bash-region)
  (global-set-key "E" 'bash-buffer)
  (global-set-key "i" 'include-guard)
  (global-set-key "p" 'p4-info-insert)
  (global-set-key "r" (lambda ()
			  (interactive)
			  (save-excursion
			    (find-file (concat mad-gdb-directory "/.gdbinit"))
			    (gdb (concat "gdb --fullname " mad-gdb-program)))))
  (global-set-key "u" (lambda ()
			  (interactive)
			  (save-excursion
			    (shell-command "p4update-merge"))))
  (global-set-key '[f4] 'string-insert-rectangle)
  (global-set-key '[f5] (lambda ()
			  (interactive)
			  (bash-buffer t)))
  (global-set-key '[f6] 'delete-following-whitespace)
  (global-set-key '[f7] (lambda ()
			  (interactive)
			  (bash-region t)))
  (global-set-key '[f8] 'bash-line)
  (global-set-key '[f9] 'find-file-at-point)
  (global-set-key "t" 'insert-time-string)
  nil)
 
(load-library "dbutils")
